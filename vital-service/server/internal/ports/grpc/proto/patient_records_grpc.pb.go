// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/patient_records.proto

package grpcport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PatientRecords_AppendVitals_FullMethodName   = "/PatientRecords/AppendVitals"
	PatientRecords_GetPatientInfo_FullMethodName = "/PatientRecords/GetPatientInfo"
)

// PatientRecordsClient is the client API for PatientRecords service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientRecordsClient interface {
	AppendVitals(ctx context.Context, in *VitalsRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetPatientInfo(ctx context.Context, in *PatientId, opts ...grpc.CallOption) (*PatientInfo, error)
}

type patientRecordsClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientRecordsClient(cc grpc.ClientConnInterface) PatientRecordsClient {
	return &patientRecordsClient{cc}
}

func (c *patientRecordsClient) AppendVitals(ctx context.Context, in *VitalsRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PatientRecords_AppendVitals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientRecordsClient) GetPatientInfo(ctx context.Context, in *PatientId, opts ...grpc.CallOption) (*PatientInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatientInfo)
	err := c.cc.Invoke(ctx, PatientRecords_GetPatientInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientRecordsServer is the server API for PatientRecords service.
// All implementations must embed UnimplementedPatientRecordsServer
// for forward compatibility.
type PatientRecordsServer interface {
	AppendVitals(context.Context, *VitalsRequest) (*StatusResponse, error)
	GetPatientInfo(context.Context, *PatientId) (*PatientInfo, error)
	mustEmbedUnimplementedPatientRecordsServer()
}

// UnimplementedPatientRecordsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPatientRecordsServer struct{}

func (UnimplementedPatientRecordsServer) AppendVitals(context.Context, *VitalsRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendVitals not implemented")
}
func (UnimplementedPatientRecordsServer) GetPatientInfo(context.Context, *PatientId) (*PatientInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientInfo not implemented")
}
func (UnimplementedPatientRecordsServer) mustEmbedUnimplementedPatientRecordsServer() {}
func (UnimplementedPatientRecordsServer) testEmbeddedByValue()                        {}

// UnsafePatientRecordsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientRecordsServer will
// result in compilation errors.
type UnsafePatientRecordsServer interface {
	mustEmbedUnimplementedPatientRecordsServer()
}

func RegisterPatientRecordsServer(s grpc.ServiceRegistrar, srv PatientRecordsServer) {
	// If the following call pancis, it indicates UnimplementedPatientRecordsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PatientRecords_ServiceDesc, srv)
}

func _PatientRecords_AppendVitals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VitalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientRecordsServer).AppendVitals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientRecords_AppendVitals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientRecordsServer).AppendVitals(ctx, req.(*VitalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientRecords_GetPatientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientRecordsServer).GetPatientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientRecords_GetPatientInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientRecordsServer).GetPatientInfo(ctx, req.(*PatientId))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientRecords_ServiceDesc is the grpc.ServiceDesc for PatientRecords service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientRecords_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PatientRecords",
	HandlerType: (*PatientRecordsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendVitals",
			Handler:    _PatientRecords_AppendVitals_Handler,
		},
		{
			MethodName: "GetPatientInfo",
			Handler:    _PatientRecords_GetPatientInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/patient_records.proto",
}
